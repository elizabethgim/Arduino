#include <Servo.h>

//Arduino pin assignment
#define PIN_LED 9
#define PIN_SERVO 10
#define PIN_IR A0

//Servo range
#define _DUTY_MIN 1100 //Rail moving up
#define _DUTY_NEU 1520
#define _DUTY_MAX 2000 // Rail moving down

//Servo speed control
#define _SERVO_ANGLE 40
#define _SERVO_SPEED 40

//Framework setting
#define _DIST_TARGET 255
#define _DIST_MIN 10
#define _DIST_MAX 410

//PID parameters
/*
#define _KP 4.5
#define _KD 580.0
#define _KI 1.5
#define _ITERM_MAX 10
*/


#define _KP 3.001
#define _KD 220.0
#define _KI 0.000197981
#define _ITERM_MAX 0.0001


#define _DIST_ALPHA 0.1 // EMA weight of new sample (range: 0 to 1). Setting this value to 1 effectively disables EMA filter.

// Event periods
#define _INTERVAL_DIST 10
#define _INTERVAL_SERVO 20 
#define _INTERVAL_SERIAL 100


Servo myservo;

int a, b; // unit: mm , for dist_cali

//Distance sensor
float dist_target;
float dist_raw, dist_ema, dist_cali, alpha;

//Servo speed control
int duty_chg_per_interval;
int duty_target, duty_curr;

//PID variables
float control, error_curr, error_prev, pterm, dterm, iterm;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial;
bool event_dist, event_servo, event_serial;


void setup() {
  // put your setup code here, to run once:
  myservo.attach(PIN_SERVO);
  //myservo.writeMicroseconds(_DUTY_NEU);

  Serial.begin(57600);

  //initialize global variables
  duty_target = duty_curr = _DUTY_NEU;
  myservo.writeMicroseconds(duty_curr);
  dist_target = _DIST_TARGET;
  dist_raw = 0.0;
  alpha = _DIST_ALPHA;

  error_prev = error_curr = 0;

  last_sampling_time_dist = last_sampling_time_servo = last_sampling_time_serial = 0;
  event_dist = event_servo = event_serial = false;
  duty_chg_per_interval = int((_DUTY_MAX - _DUTY_MIN) * (_SERVO_SPEED /  _SERVO_ANGLE) * (float(_INTERVAL_SERVO) / 1000.0));

  iterm = 0;
}


void loop() {
  // Event generator
  unsigned long time_curr = millis();
  if(time_curr >= last_sampling_time_dist + _INTERVAL_DIST) {
        last_sampling_time_dist += _INTERVAL_DIST;
        event_dist = true;
  }
  if(time_curr >= last_sampling_time_servo + _INTERVAL_SERVO) {
        last_sampling_time_servo += _INTERVAL_SERVO;
        event_servo = true;
  }
  if(time_curr >= last_sampling_time_serial + _INTERVAL_SERIAL) {
        last_sampling_time_serial += _INTERVAL_SERIAL;
        event_serial = true;
  }
  
  //distance sensor
  if(event_dist){
      event_dist = false;
      dist_raw = ir_distance();
      dist_ema = ir_distance_filltered();
      
      //PID control
      error_curr = dist_target - dist_ema;
      pterm = _KP * error_curr;
      iterm += _KI * error_curr;
      dterm = _KD * (error_curr - error_prev);  
      control = pterm + dterm + iterm;
      duty_target = _DUTY_NEU + control;
    
      //limit duty_target within the range of [_DUTY_MIN, _DUTY_MAX]
      if(duty_target < _DUTY_MIN) duty_target = _DUTY_MIN; // lower limit
      if(duty_target > _DUTY_MAX) duty_target = _DUTY_MAX; // upper limi

      if(abs(iterm) > _ITERM_MAX) iterm = 0;

      //update error_prev
      error_prev = error_curr;
      
      
      
  }

    if(event_servo) {
    event_servo = false;
    // adjust duty_curr toward duty_target by duty_chg_per_interval
    
    if(duty_target > duty_curr) {
      duty_curr += duty_chg_per_interval;
      if(duty_curr > duty_target) duty_curr = duty_target;
    }  
    else {
      duty_curr -= duty_chg_per_interval;
      if(duty_curr < duty_target) duty_curr = duty_target;
    }

    // update servo position
    myservo.writeMicroseconds(duty_curr);


  }

  if(event_serial){
    event_serial = false;


    Serial.print("IR:");
    Serial.print(dist_ema);
    Serial.print(",T:");
    Serial.print(dist_target);
    Serial.print(",P:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",D:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",I:");
    Serial.print(map(iterm,-1000,1000,510,610));
    Serial.print(",DTT:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",DTC:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",-G:245,+G:265,m:0,M:800");

/*    
    Serial.print("dist_ir:");
    Serial.print(dist_ema);
    Serial.print(",pterm:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",dterm:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",duty_target:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",duty_curr:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",Min:100,Low:200,dist_target:255,High:310,Max:410");
    
    /*
    Serial.print("dist_ir:");
    Serial.print(dist_ema);
    Serial.print(", duty_chg_per_interval:");
    Serial.print(duty_chg_per_interval);
    Serial.print(", duty_target:");
    Serial.print(duty_target);
    Serial.print(", duty_curr:");
    Serial.println(duty_curr);
    */
  }
  
  
}


//ir sensor reading value
float ir_distance(void){ // return value unit: mm
    float val;
    float volt = float(analogRead(PIN_IR));
    val = ((6762.0/(volt-9.0))-4.0) * 10.0;
    //if(val < _DIST_MIN || val > _DIST_MAX) return;
    return (-0.0009*val*val+1.4943*val-12.573);
}

#define DELAY_MICROS  1500 // 필터에 넣을 샘플값을 측정하는 딜레이(고정값!)
#define EMA_ALPHA 0.1     // EMA 필터 값을 결정하는 ALPHA 값. 작성자가 생각하는 최적값임.
float ema_dist=0;            // EMA 필터에 사용할 변수
float filtered_dist;       // 최종 측정된 거리값을 넣을 변수. loop()안에 filtered_dist = filtered_ir_distance(); 형태로 사용하면 됨.
float samples_num = 3;     // 스파이크 제거를 위한 부분필터에 샘플을 몇개 측정할 것인지. 3개로 충분함! 가능하면 수정하지 말 것.


float under_noise_filter(void){ // 아래로 떨어지는 형태의 스파이크를 제거해주는 필터
  int currReading;
  int largestReading = 0;
  for (int i = 0; i < samples_num; i++) {
    currReading = ir_distance();
    if (currReading > largestReading) { largestReading = currReading; }
    // Delay a short time before taking another reading
    delayMicroseconds(DELAY_MICROS);
  }
  return largestReading;
}

float ir_distance_filltered(void){ // 아래로 떨어지는 형태의 스파이크를 제거 후, 위로 치솟는 스파이크를 제거하고 EMA필터를 적용함.
  // under_noise_filter를 통과한 값을 upper_nosie_filter에 넣어 최종 값이 나옴.
  int currReading;
  int lowestReading = 1024;
  for (int i = 0; i < samples_num; i++) {
    currReading = under_noise_filter();
    if (currReading < lowestReading) { lowestReading = currReading; }
  }
  // eam 필터 추가
  ema_dist = EMA_ALPHA*lowestReading + (1-EMA_ALPHA)*ema_dist;
  return ema_dist;
}
